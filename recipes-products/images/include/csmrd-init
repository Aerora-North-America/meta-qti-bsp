#!/bin/sh
# Copyright (c) 2021 Qualcomm Innovation Center, Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted (subject to the limitations in the
# disclaimer below) provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#
#     * Neither the name of Qualcomm Innovation Center, Inc. nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
# GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

err() {
    echo "<3>$*" > /dev/kmsg
}
warn() {
    echo "<4>$*" > /dev/kmsg
}
notice() {
    echo "<5>$*" > /dev/kmsg
}
info() {
    echo "<6>$*" > /dev/kmsg
}

extract_bootconfig() {
    sed -n 's/^'"$1"' = "\(.*\)"$/\1/p' /proc/bootconfig
}
extract_cmdline() {
    sed -e 's/ /\n/g' /proc/cmdline | sed -n 's/^'"$1"'=\(.*\)$/\1/p'
}
extract_config() {
    local res="$(extract_cmdline $1)"
    [ -z "$res" ] && res="$(extract_bootconfig $1)"
    echo $res
}

start_adbd()
{
    echo "start_adbd: setting up device for adbd"
    # get soc platform
    if [ -f /sys/devices/soc0/machine ]; then
        socplatform=`cat /sys/devices/soc0/machine` 2> /dev/null
    elif [ -f /sys/devices/system/soc/soc0/machine ]; then
        socplatform=`cat /sys/devices/system/soc/soc0/machine` 2> /dev/null
    else
        socplatform=$(uname -r | cut -d "-" -f1-4)
    fi
    echo "start_adbd: soc: $socplatform"

    # find serialno from cmdline
    serialno="$(extract_config "androidboot.serialno")"
    echo "$serialno" | grep -qv "[^A-Za-z0-9]"
    valid_serial=$?
    if [ -z "$serialno" -o $valid_serial -ne 0 ]; then
        echo "start_adbd: serialno not found with cmdline or bootconfig, using default value"
        serialno="12345678"
    fi

    echo "start_adbd: serialno: $serialno"
    mount -t configfs configfs /sys/kernel/config
    if [ -d /sys/kernel/config/usb_gadget ]; then
        notice "start_adbd: Configuring the USB gadget using ConfigFS"
        cd /sys/kernel/config/usb_gadget
        mkdir g1
        cd g1
        mkdir strings/0x409
        mkdir configs/c.1
        mkdir configs/c.1/strings/0x409
        mkdir functions/ffs.adb

        echo "$serialno" > strings/0x409/serialnumber
        echo "QCOM" > strings/0x409/manufacturer
        echo "$socplatform" > strings/0x409/product
        echo 0x18d1 > /sys/kernel/config/usb_gadget/g1/idVendor
        echo 0x4EE7 > /sys/kernel/config/usb_gadget/g1/idProduct
        echo "ADB" > configs/c.1/strings/0x409/configuration
    else
        notice "start_adbd: Configuring the USB gadget using legacy method"
        cd /sys/class/android_usb/android0/
        echo 0 > enable
        echo 05C6 > idVendor
        echo 901D > idProduct
        echo "$serialno" > iSerial
        echo "QCOM" > iManufacturer
        echo "$socplatform" > iProduct
        echo diag > f_diag/clients
        echo diag,ffs > functions
        echo 1 > enable
    fi
    cd /

    echo "start_adbd: Configuring FunctionFS endpoints for adbd"
    if [ ! -d /dev/usb-ffs/adb ]; then
    mkdir -p /dev/usb-ffs/adb
    fi
    if [ ! -e /dev/usb-ffs/adb/ep0 ]; then
    mount -o uid=2000,gid=2000 -t functionfs adb /dev/usb-ffs/adb
    fi

    echo "start_adbd: Launching adbd"
    /sbin/adbd &

    if [ -d /sys/kernel/config/usb_gadget/g1 ]; then
        cd /sys/kernel/config/usb_gadget/g1
        sleep 1
        ln -s functions/ffs.adb configs/c.1/f1
        echo 0x80 > configs/c.1/bmAttributes

        udcname=`ls -1 /sys/bus/platform/devices/ | grep ssusb | head -n 1`

        # Force USB to be in peripheral mode in case cable plug detection
        # is not working or not enabled.
        # This assumes we are using "dwc3/ssusb" based USB devices.
        #    e.g. a600000.dwc3 -> a600000.ssusb
        echo peripheral > /sys/bus/platform/devices/${udcname}/mode

        echo "start_adbd: waiting for USB device..."
        i=1
        while [ $i -lt 60 ]
        do
            udcname=`ls -1 /sys/class/udc | grep -v dummy_udc | head -n 1`
            if [ -n "$udcname" ]; then
                break
            fi
            sleep 1
            ((i=i+1))
        done

        if [ -z "$udcname" ]; then
            echo "start_adbd: UDC didn't come up, won't be able to connect to adbd"
        fi

        echo "start_adbd: binding $udcname with gadget"
        echo $udcname > UDC
        cd /

        echo "start_adbd: adbd successfully launched"
    else
        echo "start_adbd: USB gadget didn't get created /sys/kernel/config/usb_gadget/g1"
    fi
}

start_rdshell()
{
    echo "mdev -s"
    /usr/bin/mdev -s

    echo /usr/bin/mdev > /proc/sys/kernel/hotplug

    # This is necessary to emulate the android environment expected by adbd
    echo "Configuring the Kdev environment to support 'adb shell' ..."
    mkdir /dev/pts
    mount -t devpts devpts /dev/pts
    chmod 0666 /dev/ptmx
    mkdir -p /system/bin
    ln -s /bin/sh /system/bin/sh
    chmod 4755 /bin/su

    # Set adb root cookie
    mkdir /tmp
    echo "#ROOT###" > /tmp/.adb.root
    start_adbd

    echo "Shell environment for ramdisk"
    exec /bin/mksh
}

# ctrl_msg_send - Send a string over an mhi channel
# @FILE:  file descriptor of an open mhi channel
# @MSG: message to send
#
# Returns 0 on success
mhi_ch_sendmsg() {
    local MHI_CH="$1"
    shift 1
    local MSG="$*"
    local ch_fd=$(get_mhi_ch_fd $MHI_CH)

    if [ -z "$ch_fd" ]; then
        echo "MHI channel $MHI_CH is not open" >&2
        return 1
    fi

    eval "echo $MSG >&$ch_fd"
    ret="$?"
    if [ "$ret" -ne 0 ]; then
        echo "Failed to send on $MHI_CH" >&2
    fi

    return $ret
}

MHI_RECV_TIMEOUT=10
# mhi_ch_recvmsg - Receive a single string over an mhi channel
# @MHI_CH:  Path to mhi channel
# @TIMEOUT: (optional) Seconds to receive message in seconds; default MHI_RECV_TIMEOUT
#
# Return 0 if messages was receieved
# If received, received message is printed
mhi_ch_recvmsg() {
    local MHI_CH="$1"
    local TIMEOUT="$2"
    local ch_fd=$(get_mhi_ch_fd $MHI_CH)

    if [ -z "$ch_fd" ]; then
        echo "MHI channel $MHI_CH is not open" >&2
        return 1
    fi

    local ctrl_fd="${READ_FD[$ch_fd]}"
    if [ -z "$ctrl_fd" ]; then
        echo "Read file desc is not open" >&2
        return 1
    fi

    if [ -z "$TIMEOUT" ]; then
        TIMEOUT="$MHI_RECV_TIMEOUT"
    fi

    IFS= read -u$ctrl_fd -t $TIMEOUT -r line
    ret="$?"
    if [ "$ret" -ne 0 ]; then
        echo "Failed to receive on $MHI_CH" >&2
        return $ret
    fi

    echo $line

    return $ret
}

# get_mhi_ch_fd - Find an file descriptor associated with an mhi channel
# @MHI_CH: Path to mhi channel
#
# Returns 0 if a file descriptor was found
# If found, assigned file descriptor for MHI_CH is printed
get_mhi_ch_fd() {
    local MHI_CH="$1"

    for i in ${!MHI_CH_FD[@]}; do
        if [ "${MHI_CH_FD[$i]}" = "$MHI_CH" ]; then
            echo $i
            return 0
        fi
    done

    for open_fd in $(ls -d /proc/$$/fd/*); do
        open_file="$(readlink $open_fd)"
        if [ "$open_file" = "$MHI_CH" ]; then
            ch_fd=$(basename $open_fd)
            echo "$ch_fd"
            return 0
        fi
    done
    return 1
}

# get_new_fd - Locates and prints a new file descriptor
get_new_fd() {
    local ch_fd=0
    while [ -e "/proc/$$/fd/$ch_fd" ]; do
        (( ch_fd += 1 ))
    done
    echo $ch_fd
}

# mhi_ch_open - Open an mhi channel as read/write
# @MHI_CH: Path to mhi channel
#
# Returns 0 if MHI_CH was successfully opened
mhi_ch_open() {
    local MHI_CH="$1"
    local ch_fd=0

    if [ ! -e "$MHI_CH" ]; then
        return 1
    fi

    ch_fd="$(get_mhi_ch_fd $MHI_CH)"
    if [ ! -z "$ch_fd" ]; then
        return 0
    fi

    ch_fd=$(get_new_fd)
    eval "exec $ch_fd<>$MHI_CH" 2>/dev/null
    ret="$?"
    if [ "$ret" -ne 0 ]; then
        echo "Could not open $MHI_CH" >&2
        return $ret
    fi

    cat - <&"$ch_fd" |&
    READ_PID[$ch_fd]="$!"

    ch_rfd=$(get_new_fd)
    eval "exec $ch_rfd<&p" 2>/dev/null
    ret="$?"
    if [ "$ret" -ne 0 ]; then
        echo "Error opening read process" >&2
        return $ret
    fi
    READ_FD[$ch_fd]="$ch_rfd"

    echo "Opened $MHI_CH" >&2
    MHI_CH_FD[$ch_fd]="$MHI_CH"
    return 0
}

# mhi_ch_close - Close an open mhi channel
# @MHI_CH: Path to mhi channel
#
# Returns 0 if file descriptor was able to close
mhi_ch_close() {
    local MHI_CH="$1"
    local ch_fd=$(get_mhi_ch_fd $MHI_CH)

    if [ -z "$ch_fd" ]; then
        echo "MHI channel $MHI_CH is not open" >&2
        return 1
    fi

    if [ ! -z "${READ_PID[$ch_fd]}" ]; then
        kill "${READ_PID[$ch_fd]}"
        READ_PID[$ch_fd]=""
    fi

    if [ ! -z "${READ_FD[$ch_fd]}" ]; then
        eval "exec ${READ_FD[$ch_fd]}>&-"
        READ_FD[$ch_fd]=""
    fi

    eval "exec $ch_fd>&-"
    ret="$?"
    if [ "$ret" -ne 0 ]; then
        echo "Could not close <$ch_fd>" >&2
        return $ret
    fi
    echo "Closed $MHI_CH" >&2

    MHI_CH_FD[$ch_fd]=""
    return 0
}

MHI_CH_RETRIES=300
# wait_for_mhi_ch - Waits on and opens a mhi channel to send/recv messages
# @MHI_CH:  Path to mhi channel
# @RETRIES: (optional) Retry count to open MHI_CH; default MHI_CH_RETRIES
#
# Returns 0 if MHI_CH was found and opened
wait_for_mhi_ch() {
    local MHI_CH="$1"
    local RETRIES="$2"

    if [ -z "$RETRIES" ]; then
        RETRIES="$MHI_CH_RETRIES"
    fi

    mhi_ch_open $MHI_CH
    ret="$?"

    while [ "$ret" -ne 0 ]; do
        if [ "$RETRIES" -le 0 ]; then
           echo "Timeout waiting for $MHI_CH" >&2
           return 1
        fi
        echo "Waiting on $MHI_CH..." >&2
        sleep 1
        (( RETRIES -= 1 ))
        mhi_ch_open $MHI_CH
        ret="$?"
    done

    return 0
}

config_interface()
{
    LOCAL_INTERFACE="$1"
    LOCAL_ADDR="$2"
    REMOTE_ADDR="$3"

    INTERFACE_TIMEOUT=60
    ifconfig -a $LOCAL_INTERFACE >/dev/null 2>&1
    while [ "$?" -ne 0 ]; do
        echo "Waiting for $LOCAL_INTERFACE..."
        sleep 1
        if [ "$INTERFACE_TIMEOUT" -le 0 ]; then
            return 1
        fi
        (( INTERFACE_TIMEOUT -= 1 ))
        ifconfig -a $LOCAL_INTERFACE >/dev/null 2>&1
    done

    # Bringup interface
    ifconfig $LOCAL_INTERFACE $LOCAL_ADDR up

    # Configure route
    ip route add $REMOTE_ADDR via $LOCAL_ADDR
    return 0
}

do_mounts()
{
    if [ -f /etc/fstab ]; then
        echo "mount -a"
        /bin/mount -a
    fi

    echo "mount sysfs"
    mount -t sysfs sysfs /sys

    echo "mount debugfs"
    mount -t debugfs debugfs /sys/kernel/debug

    echo "mount proc"
    mount proc /proc -t proc

    echo "mount devtmpfs"
    mount -t devtmpfs devtmpfs /dev

    echo "mount tmpfs"
    mkdir -p /tmp
    mount -t tmpfs tmpfs /tmp
}

do_mounts

# do_nbdtab - create nbd tab and negotiate images on nbd blocks. Then mount systemfs ans switch root
# @1:  HOST_ADDR
# @2:  Images Port no
# @3:  Config files port no
# @4:  Debug transport
do_nbdtab()
{
    portno="$2"
    config_portno="$3"
    # Create nbd-server config
    echo "nbd0 $1 system.img.raw persist" > /etc/nbdtab
    echo "nbd1 $1 systemrw.img.raw  persist" >> /etc/nbdtab
    echo "nbd2 $1 persist.img.raw  persist" >> /etc/nbdtab
    echo "nbd3 $1 userdata.img.raw  persist" >> /etc/nbdtab
    echo "nbd4 $1 cache.img.raw  persist" >> /etc/nbdtab
    echo "nbd5 $1 NON-HLOS.bin persist" >> /etc/nbdtab
    echo "nbd6 $1 default persist" >> /etc/nbdtab

    nbdclient nbd0 $portno # connect remote system.img
    nbdclient nbd1 $portno # connect remote systemrw.img
    nbdclient nbd2 $portno # connect remote persist.img
    nbdclient nbd3 $portno # connect remote userdata.img
    nbdclient nbd4 $portno # connect remote cache.img
    nbdclient nbd5 $portno # connect NON-HLOS
    if [ $config_portno != "0" ]; then
        nbdclient nbd6 $config_portno # connect Modem config files
    fi

    # if nbd negotiation fails, drop to ramdsik
    if [ "$?" -ne 0 ]; then
        echo "NBD connection failed. Fall back to ramdisk shell for debugging"
        start_rdshell
    fi

    # mount system.img
    mnt_dir="/mnt/system"
    mkdir -p $mnt_dir
    mount -o rw /dev/nbd0 $mnt_dir
    #umount /sys/kernel/debug /sys /proc /dev

    if [ $config_portno != "0" ]; then
        # mount hostmgr config readonly
        mnt_hostmgr_dir="/mnt/system/etc/csm/x100"
        mkdir -p $mnt_hostmgr_dir
        mount /dev/nbd6p1 $mnt_hostmgr_dir
    fi

    # update systemd mount files to mount it from nbd devices
    cd $mnt_dir/lib/systemd/system/
    sed -i 's+/dev/disk/by-partlabel/systemrw+/dev/nbd1+g' systemrw.mount
    sed -i 's+/dev/disk/by-partlabel/persist+/dev/nbd2+g' persist.mount
    sed -i 's+/dev/disk/by-partlabel/userdata+/dev/nbd3+g' data.mount
    sed -i 's+/dev/disk/by-partlabel/cache+/dev/nbd4+g' cache.mount
    if [ -f firmware-mount.service ]; then
        sed -i 's+/dev/disk/by-partlabel/modem${SLOT_SUFFIX}+/dev/nbd5+g' firmware-mount.service
        sed -i '/BindsTo=/d' firmware-mount.service
        sed -i '/After=/d' firmware-mount.service
    elif [ -f firmware.mount ]; then
        sed -i 's+/dev/disk/by-partlabel/modem+/dev/nbd5+g' firmware.mount
    else
        echo "firmware.mount or firmware-mount.service are not found"
    fi

    # set debug transport
    echo "Set debug transport to $4"
    # mount userdata.img
    mnt_data_dir="/mnt/system/data"
    mkdir -p $mnt_data_dir
    mount -o rw /dev/nbd3 $mnt_data_dir
    echo $4 > $mnt_data_dir/debug_transport.conf
    umount $mnt_data_dir

    # Switch root to remote sysfs
    echo "Switching to system partition on $partition"
    exec /bin/switch_root -c /dev/console $mnt_dir /sbin/init
}

fstab_suffix="$(extract_config androidboot.fstab_suffix)"
if [ -z "$fstab_suffix" ]; then
    echo "No boot suffix detected, using default for flashless"
    fstab_suffix="default"
else
    echo "Detected boot from: $fstab_suffix"
fi

case $fstab_suffix in
    network_boot)
        echo "In Network boot configuration"

        LOCAL_INTERFACE="eth00"

        # source /usr/bin/ecpri_install
        /sbin/insmod /lib/modules/gsim.ko
        /sbin/insmod /lib/modules/ecpri_dmam.ko
        /sbin/insmod /lib/modules/fpc_qsfp.ko
        /sbin/insmod /lib/modules/lassen_qcom_aw_phy.ko qcom_aw_phy_ref_clk_mode=1
        /sbin/insmod /lib/modules/lassen_mtip.ko
        /sbin/insmod /lib/modules/lassen_secure_eip.ko
        /sbin/insmod /lib/modules/ecpri_core.ko
        ethtool -s $LOCAL_INTERFACE msglvl 1
        ethtool -s $LOCAL_INTERFACE autoneg off

        # Dynamic IP
        INTERFACE_TIMEOUT=60
        ifconfig -a $LOCAL_INTERFACE >/dev/null 2>&1
        while [ "$?" -ne 0 ]; do
            echo "Waiting for $LOCAL_INTERFACE..."
            sleep 1
            if [ "$INTERFACE_TIMEOUT" -le 0 ]; then
                start_rdshell
            fi
            (( INTERFACE_TIMEOUT -= 1 ))
            ifconfig -a $LOCAL_INTERFACE >/dev/null 2>&1
        done

        ifconfig $LOCAL_INTERFACE up

        INTERFACE_LINKUP_TIMEOUT=60
        IP_LINK_STATUS="$(ip address | grep $LOCAL_INTERFACE: | cut -d' ' -f9)"
        while [[ $IP_LINK_STATUS != "UP" ]]; do
            echo "wait for $INTERFACE_LINKUP_TIMEOUT sec, IP link to be up, current status : $IP_LINK_STATUS"
            sleep 1
            if [ $INTERFACE_LINKUP_TIMEOUT -le 0 ]; then
                start_rdshell
            fi
            (( INTERFACE_LINKUP_TIMEOUT -= 1 ))
            IP_LINK_STATUS="$(ip address | grep $LOCAL_INTERFACE: | cut -d' ' -f9)"
        done
        echo "IP Link is $IP_LINK_STATUS..."

        /usr/sbin/dhcpcd $LOCAL_INTERFACE
        if [ "$?" -ne 0 ]; then
            echo "error starting dhcpcd..."
            start_rdshell
        fi

        HOST_ADDRESS_TIMEOUT=5
        while [[ -z $HOST_ADDR ]]; do
            echo "Waiting to get HOST Address..."
            sleep 1
            if [ "$HOST_ADDRESS_TIMEOUT" -le 0 ]; then
                start_rdshell
            fi
            (( HOST_ADDRESS_TIMEOUT -= 1 ))
            # /usr/sbin/dhcpcd $LOCAL_INTERFACE
            # sleep 1
            HOST_ADDR="$(echo $(/usr/sbin/dhcpcd -U $LOCAL_INTERFACE | grep "dhcp_server_identifier=" | cut -d'=' -f2))"
        done
        echo "Server Address : $HOST_ADDR"

        # get the Device Serial No. from the HOST RU Manager
        DEVICE_SERIAL=$(/usr/sbin/csm_ru_nwboot_client $LOCAL_INTERFACE $HOST_ADDR | grep "Device Serial :" | cut -d':' -f2)

        if [[ -z $DEVICE_SERIAL || $DEVICE_SERIAL == "-1" ]]; then
            echo "Failed to get Device Serial No."
            start_rdshell
        fi
        echo "Got Device Serial No. From HOST : $DEVICE_SERIAL"

        # Create /etc/nbdtab and nbd-client connect remote nbdkit
        portno="$(( 14809 + $DEVICE_SERIAL ))"
        config_portno="$(( 0 ))"

        do_nbdtab $HOST_ADDR $portno $config_portno "usb"

        ;;
    emmc)
        partition="$(extract_config root)"
        ## wait for system partition for 60sec
        timeout=60
        while [ ! -e "$partition" ]; do
            echo "Waiting for $partition."
            sleep 1
            ((timeout -= 1))
            if [ "$timeout" -le 0 ]; then
                echo "$partition not available"
                start_rdshell
            fi
        done
        #mount system partition
        mnt_dir="/mnt/system"
        mkdir -p $mnt_dir
# if DM-Verity is enabled then only this file verity.env exits
# verity protection
verity_cmdline="$(sed -e 's/ /\n/g' /proc/cmdline | egrep 'verity')"
if [ -n "$verity_cmdline" ] && [ -f /etc/verity.env ]; then
     source /etc/verity.env
     veritysetup open $partition system $partition $VERITY_ROOT_HASH --salt $VERITY_SALT --hash-offset $VERITY_HASH_OFFSET --data-blocks $VERITY_DATA_BLOCKS --fec-device $partition --fec-offset $VERITY_FEC_OFFSET --fec-roots $VERITY_FEC_ROOTS --root-hash-signature=/etc/verity_sig.txt

    timeout=30
    # Wait till the block device is available
     while [ ! -e /dev/mapper/system ]; do
     echo "waiting for /dev/mapper/system $partition"
     sleep 1
     ((timeout -= 1))
            if [ "$timeout" -le 0 ]; then
                echo "$partition not available"
# If open fails we are still starting rdshell which is not needed
# we are expected to  reboot needs to be disable and reboot for production builds
                 start_rdshell
            fi
     done
     echo "/dev/mapper/system ready, time = $counter ms"
     mount -t ext4 -o ro /dev/mapper/system $mnt_dir
else
#case when dm-verity is not eanbled
     mount -o ro $partition $mnt_dir

fi   # end of  if verity file exist check.
        umount /sys/kernel/debug /sys /proc /dev
        echo "Switching to system partition on $partition"
        exec /bin/switch_root -c /dev/console $mnt_dir /sbin/init
        ;;
    default)
        # default --> flashless
        # ECPRI module load
        insmod /lib/modules/gsim.ko
        insmod /lib/modules/ecpri_dmam.ko

        CTRL_DEV="/dev/mhi_pipe_16"
        wait_for_mhi_ch $CTRL_DEV
        ret="$?"
        if [ "$ret" -ne 0 ]; then
            start_rdshell
        fi

        echo "Sending sync message"
        mhi_ch_sendmsg $CTRL_DEV START
        ret="$?"
        if [ "$ret" -ne 0 ]; then
            echo "Could not send START"
            start_rdshell
        fi

        echo "Waiting for config"
        config_string="$(mhi_ch_recvmsg $CTRL_DEV 30)"
        if [ -z "$config_string" ]; then
            echo "Could not receive config from Host"
            start_rdshell
        fi
        echo "Received config: $config_string"

        echo "Receive debug transport"
        debug_transport="$(mhi_ch_recvmsg $CTRL_DEV 30)"
        if [ -z "$debug_transport" ]; then
            echo "Could not receive debug_transport from Host"
            start_rdshell
        fi
        echo "Received debug transport: $debug_transport"


        mhi_ch_sendmsg $CTRL_DEV "Config received '$HOST_ADDR' '$LOCAL_ADDR'"
        ret="$?"
        if [ "$ret" -ne 0 ]; then
            echo "Failed to send message"
        fi

        mhi_ch_close $CTRL_DEV
        ret="$?"
        if [ "$ret" -ne 0 ]; then
            echo "Could not close $CTRL_DEV"
        fi

        # Static IP
        LOCAL_INTERFACE="mhi_swip0"
        HOST_ADDR="192.200.100.$config_string"
        LOCAL_ADDR="192.200.101.$config_string"
        config_interface "$LOCAL_INTERFACE" "$LOCAL_ADDR" "$HOST_ADDR"
        if [ "$?" -ne 0 ]; then
            echo "Failed to config interface: $LOCAL_INTERFACE"
            start_rdshell
        fi

        # Configure mhi_swipe1 interface for QDU Mplane App - OEM OAM App
        OAM_HOST_ADDR="192.200.102.$config_string"
        MPLANE_ADDR="192.200.103.$config_string"
        MPLANE_INTERFACE="mhi_swip1"
        config_interface "$MPLANE_INTERFACE" "$MPLANE_ADDR" "$OAM_HOST_ADDR"
        if [ "$?" -ne 0 ]; then
            echo "Failed to config interface: $MPLANE_INTERFACE"
        fi
        # Create /etc/nbdtab and nbd-client connect remote nbdkit
        portno="$(( 10809 + $config_string ))"
        config_portno="$(( 12809 + $config_string ))"

        do_nbdtab $HOST_ADDR $portno $config_portno $debug_transport
        ;;
    rdshell)
        echo "Starting ramdisk shell"
        start_rdshell
        ;;
    *)
        echo "Unknown boot: $fstab_suffix"
        ;;
esac

echo "Defaulting to ramdisk shell"
start_rdshell
