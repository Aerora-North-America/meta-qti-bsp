From d5284e03e50e8c6531d259d317a377ee73261ddc Mon Sep 17 00:00:00 2001
From: Remil Ram <remilr@codeaurora.org>
Date: Thu, 23 Jul 2020 17:11:35 -0700
Subject: [PATCH] remove-udev-references-from-meson-build

---
 meson.build | 752 ++----------------------------------------------------------
 1 file changed, 24 insertions(+), 728 deletions(-)

diff --git a/meson.build b/meson.build
index 1bdb9c7..b95a7c0 100644
--- a/meson.build
+++ b/meson.build
@@ -1,6 +1,6 @@
 # SPDX-License-Identifier: LGPL-2.1+
 
-project('systemd', 'c',
+project('libsystemdq', 'c',
         version : '244',
         license : 'LGPLv2+',
         default_options: [
@@ -13,7 +13,7 @@ project('systemd', 'c',
         meson_version : '>= 0.46',
        )
 
-libsystemd_version = '0.27.1'
+libsystemdq_version = '0.27.1'
 libudev_version = '1.6.16'
 
 # We need the same data in two different formats, ugh!
@@ -1400,16 +1400,9 @@ includes = include_directories('src/basic',
                                'src/boot',
                                'src/shared',
                                'src/systemd',
-                               'src/journal',
-                               'src/journal-remote',
-                               'src/nspawn',
                                'src/resolve',
                                'src/timesync',
                                'src/time-wait-sync',
-                               'src/login',
-                               'src/udev',
-                               'src/libudev',
-                               'src/core',
                                'src/shutdown',
                                'src/libsystemd/sd-bus',
                                'src/libsystemd/sd-device',
@@ -1419,7 +1412,6 @@ includes = include_directories('src/basic',
                                'src/libsystemd/sd-netlink',
                                'src/libsystemd/sd-network',
                                'src/libsystemd/sd-resolve',
-                               'src/libsystemd-network',
                                '.')
 
 add_project_arguments('-include', 'config.h', language : 'c')
@@ -1431,52 +1423,40 @@ subdir('catalog')
 subdir('src/systemd')
 subdir('src/basic')
 subdir('src/libsystemd')
-subdir('src/libsystemd-network')
-subdir('src/journal')
-subdir('src/login')
-
-libjournal_core = static_library(
-        'journal-core',
-        libjournal_core_sources,
-        journald_gperf_c,
-        include_directories : includes,
-        install : false)
 
-libsystemd_sym_path = '@0@/@1@'.format(project_source_root, libsystemd_sym)
-libsystemd = shared_library(
-        'systemd',
+libsystemdq_sym_path = '@0@/@1@'.format(project_source_root, libsystemdq_sym)
+libsystemdq = shared_library(
+        'systemdq',
         disable_mempool_c,
-        version : libsystemd_version,
+        version : libsystemdq_version,
         include_directories : includes,
         link_args : ['-shared',
-                     '-Wl,--version-script=' + libsystemd_sym_path],
+                     '-Wl,--version-script=' + libsystemdq_sym_path],
         link_with : [libbasic,
                      libbasic_gcrypt],
-        link_whole : [libsystemd_static,
-                      libjournal_client],
+        link_whole : [libsystemdq_static],
         dependencies : [threads,
                         librt,
                         libxz,
                         liblz4],
-        link_depends : libsystemd_sym,
+        link_depends : libsystemdq_sym,
         install : true,
         install_dir : rootlibdir)
 
-static_libsystemd = get_option('static-libsystemd')
-static_libsystemd_pic = static_libsystemd == 'true' or static_libsystemd == 'pic'
+static_libsystemdq = get_option('static-libsystemd')
+static_libsystemdq_pic = static_libsystemdq == 'true' or static_libsystemdq == 'pic'
 
-install_libsystemd_static = static_library(
+install_libsystemdq_static = static_library(
         'systemd',
-        libsystemd_sources,
-        journal_client_sources,
+        libsystemdq_sources,
         basic_sources,
         basic_gcrypt_sources,
         disable_mempool_c,
         include_directories : includes,
-        build_by_default : static_libsystemd != 'false',
-        install : static_libsystemd != 'false',
+        build_by_default : static_libsystemdq != 'false',
+        install : static_libsystemdq != 'false',
         install_dir : rootlibdir,
-        pic : static_libsystemd == 'true' or static_libsystemd == 'pic',
+        pic : static_libsystemdq == 'true' or static_libsystemdq == 'pic',
         dependencies : [threads,
                         librt,
                         libxz,
@@ -1486,7 +1466,7 @@ install_libsystemd_static = static_library(
                         libmount,
                         libselinux,
                         libgcrypt],
-        c_args : libsystemd_c_args + (static_libsystemd_pic ? [] : ['-fno-PIC']))
+        c_args : libsystemdq_c_args + (static_libsystemdq_pic ? [] : ['-fno-PIC']))
 
 #Generate autosuspend rules
 make_autosuspend_rules_py = find_program('tools/make-autosuspend-rules.py')
@@ -1497,202 +1477,9 @@ make_autosuspend_rules_py = find_program('tools/make-autosuspend-rules.py')
 # usually, but not always, installed in /bin.
 public_programs = []
 
-subdir('src/libudev')
 subdir('src/shared')
-subdir('src/core')
-subdir('src/shutdown')
-subdir('src/udev')
-subdir('src/network')
-
-subdir('src/analyze')
-subdir('src/journal-remote')
-subdir('src/coredump')
-subdir('src/pstore')
-subdir('src/hostname')
-subdir('src/import')
-subdir('src/kernel-install')
-subdir('src/locale')
-subdir('src/machine')
-subdir('src/portable')
-subdir('src/nspawn')
-subdir('src/resolve')
-subdir('src/timedate')
-subdir('src/timesync')
-subdir('src/vconsole')
 subdir('src/boot/efi')
 
-subdir('src/test')
-subdir('src/fuzz')
-subdir('rules.d')
-subdir('test')
-
-############################################################
-
-# only static linking apart from libdl, to make sure that the
-# module is linked to all libraries that it uses.
-test_dlopen = executable(
-        'test-dlopen',
-        test_dlopen_c,
-        disable_mempool_c,
-        include_directories : includes,
-        link_with : [libbasic],
-        dependencies : [libdl],
-        build_by_default : want_tests != 'false')
-
-foreach tuple : [['myhostname', 'ENABLE_NSS_MYHOSTNAME'],
-                 ['systemd',    'ENABLE_NSS_SYSTEMD'],
-                 ['mymachines', 'ENABLE_NSS_MYMACHINES'],
-                 ['resolve',    'ENABLE_NSS_RESOLVE']]
-
-        condition = tuple[1] == '' or conf.get(tuple[1]) == 1
-        if condition
-                module = tuple[0]
-
-                sym = 'src/nss-@0@/nss-@0@.sym'.format(module)
-                version_script_arg = join_paths(project_source_root, sym)
-
-                nss = shared_library(
-                        'nss_' + module,
-                        'src/nss-@0@/nss-@0@.c'.format(module),
-                        disable_mempool_c,
-                        version : '2',
-                        include_directories : includes,
-                        # Note that we link NSS modules with '-z nodelete' so that mempools never get orphaned
-                        link_args : ['-Wl,-z,nodelete',
-                                     '-shared',
-                                     '-Wl,--version-script=' + version_script_arg],
-                        link_with : [libsystemd_static,
-                                     libshared_static,
-                                     libbasic],
-                        dependencies : [threads,
-                                        librt],
-                        link_depends : sym,
-                        install : true,
-                        install_dir : rootlibdir)
-
-                # We cannot use shared_module because it does not support version suffix.
-                # Unfortunately shared_library insists on creating the symlinkâ€¦
-                meson.add_install_script('sh', '-c',
-                                         'rm $DESTDIR@0@/libnss_@1@.so'
-                                         .format(rootlibdir, module))
-
-                if want_tests != 'false'
-                        test('dlopen-nss_' + module,
-                             test_dlopen,
-                             # path to dlopen must include a slash
-                             args : nss.full_path())
-                endif
-        endif
-endforeach
-
-############################################################
-
-executable('systemd',
-           systemd_sources,
-           include_directories : includes,
-           link_with : [libcore,
-                        libshared],
-           dependencies : [versiondep,
-                           threads,
-                           librt,
-                           libseccomp,
-                           libselinux,
-                           libmount,
-                           libblkid],
-           install_rpath : rootlibexecdir,
-           install : true,
-           install_dir : rootlibexecdir)
-
-meson.add_install_script(meson_make_symlink,
-                         join_paths(rootlibexecdir, 'systemd'),
-                         join_paths(rootsbindir, 'init'))
-
-exe = executable('systemd-analyze',
-                 systemd_analyze_sources,
-                 include_directories : includes,
-                 link_with : [libcore,
-                              libshared],
-                 dependencies : [versiondep,
-                                 threads,
-                                 librt,
-                                 libseccomp,
-                                 libselinux,
-                                 libmount,
-                                 libblkid],
-                 install_rpath : rootlibexecdir,
-                 install : true)
-public_programs += exe
-
-executable('systemd-journald',
-           systemd_journald_sources,
-           include_directories : includes,
-           link_with : [libjournal_core,
-                        libshared],
-           dependencies : [threads,
-                           libxz,
-                           liblz4,
-                           libselinux],
-           install_rpath : rootlibexecdir,
-           install : true,
-           install_dir : rootlibexecdir)
-
-exe = executable('systemd-cat',
-                 systemd_cat_sources,
-                 include_directories : includes,
-                 link_with : [libjournal_core,
-                              libshared],
-                 dependencies : [threads],
-                 install_rpath : rootlibexecdir,
-                 install : true)
-public_programs += exe
-
-exe = executable('journalctl',
-                 journalctl_sources,
-                 include_directories : includes,
-                 link_with : [libshared],
-                 dependencies : [threads,
-                                 libqrencode,
-                                 libxz,
-                                 liblz4,
-                                 libpcre2],
-                 install_rpath : rootlibexecdir,
-                 install : true,
-                 install_dir : rootbindir)
-public_programs += exe
-
-executable('systemd-getty-generator',
-           'src/getty-generator/getty-generator.c',
-           include_directories : includes,
-           link_with : [libshared],
-           install_rpath : rootlibexecdir,
-           install : true,
-           install_dir : systemgeneratordir)
-
-executable('systemd-debug-generator',
-           'src/debug-generator/debug-generator.c',
-           include_directories : includes,
-           link_with : [libshared],
-           install_rpath : rootlibexecdir,
-           install : true,
-           install_dir : systemgeneratordir)
-
-executable('systemd-run-generator',
-           'src/run-generator/run-generator.c',
-           include_directories : includes,
-           link_with : [libshared],
-           install_rpath : rootlibexecdir,
-           install : true,
-           install_dir : systemgeneratordir)
-
-executable('systemd-fstab-generator',
-           'src/fstab-generator/fstab-generator.c',
-           include_directories : includes,
-           link_with : [libcore_shared,
-                        libshared],
-           install_rpath : rootlibexecdir,
-           install : true,
-           install_dir : systemgeneratordir)
-
 if conf.get('ENABLE_ENVIRONMENT_D') == 1
         executable('30-systemd-environment-d-generator',
                    'src/environment-d-generator/environment-d-generator.c',
@@ -1752,7 +1539,7 @@ if conf.get('ENABLE_RESOLVE') == 1
                    include_directories : includes,
                    link_with : [libshared,
                                 libbasic_gcrypt,
-                                libsystemd_resolve_core],
+                                libsystemdq_resolve_core],
                    dependencies : systemd_resolved_dependencies,
                    install_rpath : rootlibexecdir,
                    install : true,
@@ -1763,7 +1550,7 @@ if conf.get('ENABLE_RESOLVE') == 1
                          include_directories : includes,
                          link_with : [libshared,
                                       libbasic_gcrypt,
-                                      libsystemd_resolve_core],
+                                      libsystemdq_resolve_core],
                          dependencies : [threads,
                                          libgpg_error,
                                          libm,
@@ -1823,7 +1610,7 @@ if conf.get('ENABLE_LOGIND') == 1
                         include_directories : includes,
                         link_args : ['-shared',
                                      '-Wl,--version-script=' + version_script_arg],
-                        link_with : [libsystemd_static,
+                        link_with : [libsystemdq_static,
                                      libshared_static],
                         dependencies : [threads,
                                         libpam,
@@ -1840,13 +1627,6 @@ if conf.get('ENABLE_LOGIND') == 1
                 endif
         endif
 
-        executable('systemd-user-runtime-dir',
-                   user_runtime_dir_sources,
-                   include_directories : includes,
-                   link_with : [libshared],
-                   install_rpath : rootlibexecdir,
-                   install : true,
-                   install_dir : rootlibexecdir)
 endif
 
 if conf.get('HAVE_PAM') == 1
@@ -1896,19 +1676,10 @@ executable('systemd-boot-check-no-failures',
            install : true,
            install_dir : rootlibexecdir)
 
-exe = executable('systemd-socket-activate', 'src/activate/activate.c',
-                 include_directories : includes,
-                 link_with : [libshared],
-                 dependencies : [threads],
-                 install_rpath : rootlibexecdir,
-                 install : true)
-public_programs += exe
-
-
 if get_option('link-systemctl-shared')
         systemctl_link_with = [libshared]
 else
-        systemctl_link_with = [libsystemd_static,
+        systemctl_link_with = [libsystemdq_static,
                                libshared_static,
                                libjournal_client,
                                libbasic_gcrypt]
@@ -1950,12 +1721,6 @@ if conf.get('ENABLE_PORTABLED') == 1
         public_programs += exe
 endif
 
-foreach alias : ['halt', 'poweroff', 'reboot', 'runlevel', 'shutdown', 'telinit']
-        meson.add_install_script(meson_make_symlink,
-                                 join_paths(rootbindir, 'systemctl'),
-                                 join_paths(rootsbindir, alias))
-endforeach
-
 if conf.get('ENABLE_BACKLIGHT') == 1
         executable('systemd-backlight',
                    'src/backlight/backlight.c',
@@ -1976,14 +1741,6 @@ if conf.get('ENABLE_RFKILL') == 1
                    install_dir : rootlibexecdir)
 endif
 
-executable('systemd-system-update-generator',
-           'src/system-update-generator/system-update-generator.c',
-           include_directories : includes,
-           link_with : [libshared],
-           install_rpath : rootlibexecdir,
-           install : true,
-           install_dir : systemgeneratordir)
-
 if conf.get('HAVE_LIBCRYPTSETUP') == 1
         executable('systemd-cryptsetup',
                    'src/cryptsetup/cryptsetup.c',
@@ -2280,21 +2037,6 @@ if conf.get('ENABLE_COREDUMP') == 1
         public_programs += exe
 endif
 
-if conf.get('ENABLE_PSTORE') == 1
-        executable('systemd-pstore',
-                   systemd_pstore_sources,
-                   include_directories : includes,
-                   link_with : [libshared],
-                   dependencies : [threads,
-                                   libacl,
-                                   libdw,
-                                   libxz,
-                                   liblz4],
-                   install_rpath : rootlibexecdir,
-                   install : true,
-                   install_dir : rootlibexecdir)
-endif
-
 if conf.get('ENABLE_BINFMT') == 1
         exe = executable('systemd-binfmt',
                          'src/binfmt/binfmt.c',
@@ -2342,222 +2084,6 @@ if conf.get('ENABLE_FIRSTBOOT') == 1
                    install_dir : rootbindir)
 endif
 
-executable('systemd-remount-fs',
-           'src/remount-fs/remount-fs.c',
-           include_directories : includes,
-           link_with : [libcore_shared,
-                        libshared],
-           install_rpath : rootlibexecdir,
-           install : true,
-           install_dir : rootlibexecdir)
-
-executable('systemd-machine-id-setup',
-           'src/machine-id-setup/machine-id-setup-main.c',
-           include_directories : includes,
-           link_with : [libcore_shared,
-                        libshared],
-           install_rpath : rootlibexecdir,
-           install : true,
-           install_dir : rootbindir)
-
-executable('systemd-fsck',
-           'src/fsck/fsck.c',
-           include_directories : includes,
-           link_with : [libshared],
-           install_rpath : rootlibexecdir,
-           install : true,
-           install_dir : rootlibexecdir)
-
-executable('systemd-growfs',
-           'src/partition/growfs.c',
-           include_directories : includes,
-           link_with : [libshared],
-           dependencies : [libcryptsetup],
-           install_rpath : rootlibexecdir,
-           install : true,
-           install_dir : rootlibexecdir)
-
-executable('systemd-makefs',
-           'src/partition/makefs.c',
-           include_directories : includes,
-           link_with : [libshared],
-           install_rpath : rootlibexecdir,
-           install : true,
-           install_dir : rootlibexecdir)
-
-executable('systemd-sleep',
-           'src/sleep/sleep.c',
-           include_directories : includes,
-           link_with : [libshared],
-           install_rpath : rootlibexecdir,
-           install : true,
-           install_dir : rootlibexecdir)
-
-install_data('src/sleep/sleep.conf',
-             install_dir : pkgsysconfdir)
-
-exe = executable('systemd-sysctl',
-                 'src/sysctl/sysctl.c',
-                 include_directories : includes,
-                 link_with : [libshared],
-                 install_rpath : rootlibexecdir,
-                 install : true,
-                 install_dir : rootlibexecdir)
-public_programs += exe
-
-executable('systemd-ac-power',
-           'src/ac-power/ac-power.c',
-           include_directories : includes,
-           link_with : [libshared],
-           install_rpath : rootlibexecdir,
-           install : true,
-           install_dir : rootlibexecdir)
-
-exe = executable('systemd-detect-virt',
-                 'src/detect-virt/detect-virt.c',
-                 include_directories : includes,
-                 link_with : [libshared],
-                 install_rpath : rootlibexecdir,
-                 install : true)
-public_programs += exe
-
-exe = executable('systemd-delta',
-                 'src/delta/delta.c',
-                 include_directories : includes,
-                 link_with : [libshared],
-                 install_rpath : rootlibexecdir,
-                 install : true)
-public_programs += exe
-
-exe = executable('systemd-escape',
-                 'src/escape/escape.c',
-                 include_directories : includes,
-                 link_with : [libshared],
-                 install_rpath : rootlibexecdir,
-                 install : true,
-                 install_dir : rootbindir)
-public_programs += exe
-
-exe = executable('systemd-notify',
-                 'src/notify/notify.c',
-                 include_directories : includes,
-                 link_with : [libshared],
-                 install_rpath : rootlibexecdir,
-                 install : true,
-                 install_dir : rootbindir)
-public_programs += exe
-
-executable('systemd-volatile-root',
-           'src/volatile-root/volatile-root.c',
-           include_directories : includes,
-           link_with : [libshared],
-           install_rpath : rootlibexecdir,
-           install : true,
-           install_dir : rootlibexecdir)
-
-executable('systemd-cgroups-agent',
-           'src/cgroups-agent/cgroups-agent.c',
-           include_directories : includes,
-           link_with : [libshared],
-           install_rpath : rootlibexecdir,
-           install : true,
-           install_dir : rootlibexecdir)
-
-exe = executable('systemd-id128',
-                 'src/id128/id128.c',
-                 include_directories : includes,
-                 link_with : [libshared],
-                 install_rpath : rootlibexecdir,
-                 install : true)
-public_programs += exe
-
-exe = executable('systemd-path',
-                 'src/path/path.c',
-                 include_directories : includes,
-                 link_with : [libshared],
-                 install_rpath : rootlibexecdir,
-                 install : true)
-public_programs += exe
-
-exe = executable('systemd-ask-password',
-                 'src/ask-password/ask-password.c',
-                 include_directories : includes,
-                 link_with : [libshared],
-                 install_rpath : rootlibexecdir,
-                 install : true,
-                 install_dir : rootbindir)
-public_programs += exe
-
-executable('systemd-reply-password',
-           'src/reply-password/reply-password.c',
-           include_directories : includes,
-           link_with : [libshared],
-           install_rpath : rootlibexecdir,
-           install : true,
-           install_dir : rootlibexecdir)
-
-exe = executable('systemd-tty-ask-password-agent',
-                 'src/tty-ask-password-agent/tty-ask-password-agent.c',
-                 include_directories : includes,
-                 link_with : [libshared],
-                 install_rpath : rootlibexecdir,
-                 install : true,
-                 install_dir : rootbindir)
-public_programs += exe
-
-exe = executable('systemd-cgls',
-                 'src/cgls/cgls.c',
-                 include_directories : includes,
-                 link_with : [libshared],
-                 install_rpath : rootlibexecdir,
-                 install : true)
-public_programs += exe
-
-exe = executable('systemd-cgtop',
-                 'src/cgtop/cgtop.c',
-                 include_directories : includes,
-                 link_with : [libshared],
-                 install_rpath : rootlibexecdir,
-                 install : true)
-public_programs += exe
-
-executable('systemd-initctl',
-           'src/initctl/initctl.c',
-           include_directories : includes,
-           link_with : [libshared],
-           install_rpath : rootlibexecdir,
-           install : true,
-           install_dir : rootlibexecdir)
-
-exe = executable('systemd-mount',
-                 'src/mount/mount-tool.c',
-                 include_directories : includes,
-                 link_with : [libshared],
-                 dependencies: [libmount],
-                 install_rpath : rootlibexecdir,
-                 install : true)
-public_programs += exe
-
-meson.add_install_script(meson_make_symlink,
-                         'systemd-mount', join_paths(bindir, 'systemd-umount'))
-
-exe = executable('systemd-run',
-                 'src/run/run.c',
-                 include_directories : includes,
-                 link_with : [libshared],
-                 install_rpath : rootlibexecdir,
-                 install : true)
-public_programs += exe
-
-exe = executable('systemd-stdio-bridge',
-                 'src/stdio-bridge/stdio-bridge.c',
-                 include_directories : includes,
-                 link_with : [libshared],
-                 dependencies : [versiondep],
-                 install_rpath : rootlibexecdir,
-                 install : true)
-public_programs += exe
-
 exe = executable('busctl',
                  'src/busctl/busctl.c',
                  'src/busctl/busctl-introspect.c',
@@ -2630,69 +2156,6 @@ exe = executable('systemd-socket-proxyd',
                  install_dir : rootlibexecdir)
 public_programs += exe
 
-exe = executable('systemd-udevd',
-                 systemd_udevd_sources,
-                 include_directories : includes,
-                 c_args : '-DLOG_REALM=LOG_REALM_UDEV',
-                 link_with : [libudev_core,
-                              libsystemd_network,
-                              libudev_static],
-                 dependencies : [versiondep,
-                                 threads,
-                                 libkmod,
-                                 libidn,
-                                 libacl,
-                                 libblkid],
-                 install_rpath : udev_rpath,
-                 install : true,
-                 install_dir : rootlibexecdir)
-public_programs += exe
-
-exe = executable('udevadm',
-                 udevadm_sources,
-                 c_args : '-DLOG_REALM=LOG_REALM_UDEV',
-                 include_directories : includes,
-                 link_with : [libudev_core,
-                              libsystemd_network,
-                              libudev_static],
-                 dependencies : [versiondep,
-                                 threads,
-                                 libkmod,
-                                 libidn,
-                                 libacl,
-                                 libblkid],
-                 install_rpath : udev_rpath,
-                 install : true,
-                 install_dir : rootbindir)
-public_programs += exe
-
-executable('systemd-shutdown',
-           systemd_shutdown_sources,
-           include_directories : includes,
-           link_with : [libcore_shared,
-                        libshared],
-           dependencies : [libmount],
-           install_rpath : rootlibexecdir,
-           install : true,
-           install_dir : rootlibexecdir)
-
-executable('systemd-update-done',
-           'src/update-done/update-done.c',
-           include_directories : includes,
-           link_with : [libshared],
-           install_rpath : rootlibexecdir,
-           install : true,
-           install_dir : rootlibexecdir)
-
-executable('systemd-update-utmp',
-           'src/update-utmp/update-utmp.c',
-           include_directories : includes,
-           link_with : [libshared],
-           dependencies : [libaudit],
-           install_rpath : rootlibexecdir,
-           install : true,
-           install_dir : rootlibexecdir)
-
 if conf.get('HAVE_KMOD') == 1
         executable('systemd-modules-load',
                    'src/modules-load/modules-load.c',
@@ -2709,18 +2172,6 @@ if conf.get('HAVE_KMOD') == 1
                                  mkdir_p.format(join_paths(sysconfdir, 'modules-load.d')))
 endif
 
-exe = executable('systemd-nspawn',
-                 systemd_nspawn_sources,
-                 include_directories : includes,
-                 link_with : [libcore_shared,
-                              libnspawn_core,
-                              libshared],
-                 dependencies : [libblkid,
-                                 libseccomp],
-                 install_rpath : rootlibexecdir,
-                 install : true)
-public_programs += exe
-
 if conf.get('ENABLE_NETWORKD') == 1
         executable('systemd-networkd',
                    systemd_networkd_sources,
@@ -2825,58 +2276,6 @@ foreach tuple : tests
         endif
 endforeach
 
-exe = executable(
-        'test-libsystemd-sym',
-        test_libsystemd_sym_c,
-        include_directories : includes,
-        link_with : [libsystemd],
-        build_by_default : want_tests != 'false',
-        install : install_tests,
-        install_dir : testsdir)
-if want_tests != 'false'
-        test('test-libsystemd-sym', exe)
-endif
-
-exe = executable(
-        'test-libsystemd-static-sym',
-        test_libsystemd_sym_c,
-        include_directories : includes,
-        link_with : [install_libsystemd_static],
-        dependencies : [threads], # threads is already included in dependencies on the library,
-                                  # but does not seem to get propagated. Add here as a work-around.
-        build_by_default : want_tests != 'false' and static_libsystemd_pic,
-        install : install_tests and static_libsystemd_pic,
-        install_dir : testsdir)
-if want_tests != 'false' and static_libsystemd_pic
-        test('test-libsystemd-static-sym', exe)
-endif
-
-exe = executable(
-        'test-libudev-sym',
-        test_libudev_sym_c,
-        include_directories : includes,
-        c_args : '-Wno-deprecated-declarations',
-        link_with : [libudev],
-        build_by_default : want_tests != 'false',
-        install : install_tests,
-        install_dir : testsdir)
-if want_tests != 'false'
-        test('test-libudev-sym', exe)
-endif
-
-exe = executable(
-        'test-libudev-static-sym',
-        test_libudev_sym_c,
-        include_directories : includes,
-        c_args : '-Wno-deprecated-declarations',
-        link_with : [install_libudev_static],
-        build_by_default : want_tests != 'false' and static_libudev_pic,
-        install : install_tests and static_libudev_pic,
-        install_dir : testsdir)
-if want_tests != 'false' and static_libudev_pic
-        test('test-libudev-static-sym', exe)
-endif
-
 ############################################################
 
 fuzzer_exes = []
@@ -2932,26 +2331,14 @@ xml_helper_py = find_program('tools/xml_helper.py')
 hwdb_update_sh = find_program('tools/meson-hwdb-update.sh')
 autosuspend_update_sh = find_program('tools/meson-autosuspend-update.sh')
 
-subdir('sysctl.d')
 subdir('sysusers.d')
 subdir('tmpfiles.d')
-subdir('hwdb.d')
-subdir('units')
 subdir('presets')
 subdir('network')
 subdir('man')
 subdir('shell-completion/bash')
 subdir('shell-completion/zsh')
-subdir('docs/sysvinit')
-subdir('docs/var-log')
 
-install_subdir('factory/etc',
-               install_dir : factorydir)
-
-install_data('xorg/50-systemd-user.sh',
-             install_dir : xinitrcdir)
-install_data('modprobe.d/systemd.conf',
-             install_dir : modprobedir)
 install_data('LICENSE.GPL2',
              'LICENSE.LGPL2.1',
              'NEWS',
@@ -2994,100 +2381,11 @@ endif
 
 ############################################################
 
-# Enable tests for all supported sanitizers
-foreach tuple : sanitizers
-        sanitizer = tuple[0]
-        build = tuple[1]
-
-        if cc.has_link_argument('-fsanitize=@0@'.format(sanitizer))
-                prev = ''
-                foreach p : fuzz_regression_tests
-                        b = p.split('/')[-2]
-                        c = p.split('/')[-1]
-
-                        name = '@0@:@1@'.format(b, sanitizer)
-
-                        if name != prev
-                                if want_tests == 'false'
-                                        message('Not compiling @0@ because tests is set to false'.format(name))
-                                elif slow_tests
-                                        exe = custom_target(
-                                                name,
-                                                output : name,
-                                                depends : build,
-                                                command : [env, 'ln', '-fs',
-                                                           join_paths(build.full_path(), b),
-                                                           '@OUTPUT@'],
-                                                build_by_default : true)
-                                else
-                                        message('Not compiling @0@ because slow-tests is set to false'.format(name))
-                                endif
-                        endif
-                        prev = name
-
-                        if want_tests != 'false' and slow_tests
-                                test('@0@:@1@:@2@'.format(b, c, sanitizer),
-                                     env,
-                                     args : [exe.full_path(),
-                                             join_paths(project_source_root, p)])
-                        endif
-                endforeach
-        endif
-endforeach
-
-
-############################################################
-
-if git.found()
-        all_files = run_command(
-                git,
-                ['--git-dir=@0@/.git'.format(project_source_root),
-                 'ls-files',
-                 ':/*.[ch]'])
-        all_files = files(all_files.stdout().split())
-
-        custom_target(
-                'tags',
-                output : 'tags',
-                command : [env, 'etags', '-o', '@0@/TAGS'.format(project_source_root)] + all_files)
-        run_target(
-                'ctags',
-                command : [env, 'ctags', '-o', '@0@/tags'.format(project_source_root)] + all_files)
-endif
-
-if git.found()
-        meson_git_contrib_sh = find_program('tools/meson-git-contrib.sh')
-        run_target(
-                'git-contrib',
-                command : [meson_git_contrib_sh])
-endif
-
-if git.found()
-        git_head = run_command(
-                git,
-                ['--git-dir=@0@/.git'.format(project_source_root),
-                 'rev-parse', 'HEAD']).stdout().strip()
-        git_head_short = run_command(
-                git,
-                ['--git-dir=@0@/.git'.format(project_source_root),
-                 'rev-parse', '--short=7', 'HEAD']).stdout().strip()
-
-        run_target(
-                'git-snapshot',
-                command : ['git', 'archive',
-                           '-o', '@0@/systemd-@1@.tar.gz'.format(project_source_root,
-                                                                 git_head_short),
-                           '--prefix', 'systemd-@0@/'.format(git_head),
-                           'HEAD'])
-endif
-
-############################################################
-
 meson_check_api_docs_sh = find_program('tools/meson-check-api-docs.sh')
 run_target(
         'check-api-docs',
-        depends : [man, libsystemd, libudev],
-        command : [meson_check_api_docs_sh, libsystemd.full_path(), libudev.full_path()])
+        depends : [man, libsystemdq],
+        command : [meson_check_api_docs_sh, libsystemdq.full_path(), ])
 
 ############################################################
 watchdog_opt = service_watchdog == '' ? 'disabled' : service_watchdog
@@ -3155,8 +2453,7 @@ status += [
         'time epoch:                        @0@ (@1@)'.format(time_epoch, alt_time_epoch)]
 
 status += [
-        'static libsystemd:                 @0@'.format(static_libsystemd),
-        'static libudev:                    @0@'.format(static_libudev)]
+        'static libsystemdq:                 @0@'.format(static_libsystemdq),]
 
 # TODO:
 # CFLAGS:   ${OUR_CFLAGS} ${CFLAGS}
@@ -3259,7 +2556,6 @@ foreach tuple : [
         ['debug siphash'],
         ['valgrind',         conf.get('VALGRIND') == 1],
         ['trace logging',    conf.get('LOG_TRACE') == 1],
-        ['link-udev-shared',      get_option('link-udev-shared')],
         ['link-systemctl-shared', get_option('link-systemctl-shared')],
 ]
 
-- 
2.7.4

