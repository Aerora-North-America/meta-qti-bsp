From be41e46cca8123b8c174d9b84846f0625a63ab5e Mon Sep 17 00:00:00 2001
From: Bulbul Dabi <bdabi@codeaurora.org>
Date: Thu, 23 Jul 2020 14:59:21 +0530
Subject: [PATCH] Support MTP function

Detect USB state and start mtpserver
---
 util-linux/mdev.c | 85 +++++++++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 82 insertions(+), 3 deletions(-)

diff --git a/util-linux/mdev.c b/util-linux/mdev.c
index 207a112..bb000fc 100644
--- a/util-linux/mdev.c
+++ b/util-linux/mdev.c
@@ -274,8 +274,8 @@
 #ifndef SO_RCVBUFFORCE
 #define SO_RCVBUFFORCE 33
 #endif
-static const char keywords[] ALIGN1 = "add\0remove\0"; // "change\0"
-enum { OP_add, OP_remove };
+static const char keywords[] ALIGN1 = "add\0remove\0change\0"; // "change\0"
+enum { OP_add, OP_remove, OP_change };
 
 struct envmatch {
 	struct envmatch *next;
@@ -1072,6 +1072,73 @@ static void signal_mdevs(unsigned my_pid)
 	}
 }
 
+/* 1: in,  0: out */
+static void handle_mtp_plug_in_out(int in_out)
+{
+	static int mtp_pid;
+
+	if (in_out) {
+		printf("run mtpserver\n");
+		mtp_pid = fork();
+		if(!mtp_pid) {
+			execl("/usr/bin/mtpserver", "mtpserver", NULL);
+			exit(-1);
+		} else if (mtp_pid < 0) {
+			printf("could not create child process to execute mtp server module\n");
+		}
+	} else if (in_out == 0 && mtp_pid > 0) {
+		kill(mtp_pid, SIGKILL);
+		waitpid(mtp_pid, NULL, 0);
+		mtp_pid = 0;
+	}
+	return;
+}
+
+static int check_mtp_mode(void)
+{
+	FILE *fd;
+	char buffer[128];
+	int mtp_flag = 0;
+
+	fd = fopen("/sys/class/android_usb/android0/functions", "r");
+	while (fgets(buffer, 128, fd)) {
+		if (strstr(buffer, "mtp") != NULL) {
+			mtp_flag = 1;
+			break;
+		}
+	}
+	fclose(fd);
+	return mtp_flag;
+}
+
+static int check_usb_status(void)
+{
+	FILE *fp;
+	char buffer[16];
+	int usb_status = 0;
+
+	fp = fopen("/sys/class/android_usb/android0/state", "r");
+	while(fgets(buffer, 16, fp)) {
+		if (strstr(buffer, "CONFIGURED") != NULL) {
+			usb_status = 1;
+			break;
+		}
+	}
+	fclose(fp);
+	return usb_status;
+}
+
+static void get_usb_state(char *usb_state)
+{
+	FILE *fp;
+
+	fp = fopen("/sys/class/android_usb/android0/state", "r");
+	fgets(usb_state, 16, fp);
+	fclose(fp);
+	return;
+}
+
+
 static void process_action(char *temp, unsigned my_pid)
 {
 	char *fw;
@@ -1116,7 +1183,19 @@ static void process_action(char *temp, unsigned my_pid)
 	);
 
 	snprintf(temp, PATH_MAX, "/sys%s", env_devpath);
-	if (op == OP_remove) {
+	if (op == OP_change) {
+		if(check_mtp_mode() != 0) { // mtp mode
+			char usb_state[16];
+			get_usb_state(usb_state);
+			if (!strncmp(usb_state, "CONFIGURED", 10)) {//USB has been configured
+				/* USB plug in */
+				handle_mtp_plug_in_out(1);
+			} else if (!strncmp(usb_state, "DISCONNECTED", 12)) {//USB has been disconnected
+				/* USB plug out */
+				handle_mtp_plug_in_out(0);
+			}
+		}
+	} else if (op == OP_remove) {
 		/* Ignoring "remove firmware". It was reported
 		 * to happen and to cause erroneous deletion
 		 * of device nodes. */
-- 
2.7.4

